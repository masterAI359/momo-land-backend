// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  nickname  String   @unique
  email     String   @unique
  password  String?  // Optional for guest users
  isGuest   Boolean  @default(false)
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  posts         Post[]
  comments      Comment[]
  likes         Like[]
  chatRooms     ChatRoom[]
  chatMessages  ChatMessage[]
  roomMembers   RoomMember[]
  reports       Report[]

  @@map("users")
}

model Post {
  id          String   @id @default(uuid())
  title       String
  content     String
  category    String
  excerpt     String?
  isPublished Boolean  @default(true)
  viewCount   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  comments Comment[]
  likes    Like[]

  @@map("posts")
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  postId   String
  post     Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Like {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  // Relations
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@map("likes")
}

model ChatRoom {
  id          String   @id @default(uuid())
  name        String
  description String?
  atmosphere  String   @default("romantic") // romantic, intimate, friendly
  isPrivate   Boolean  @default(false)
  maxMembers  Int      @default(50)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  creatorId String
  creator   User   @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  messages ChatMessage[]
  members  RoomMember[]

  @@map("chat_rooms")
}

model RoomMember {
  id       String   @id @default(uuid())
  joinedAt DateTime @default(now())
  isOnline Boolean  @default(true)
  lastSeen DateTime @default(now())

  // Relations
  roomId String
  room   ChatRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)
  userId String
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([roomId, userId])
  @@map("room_members")
}

model ChatMessage {
  id        String   @id @default(uuid())
  content   String
  type      String   @default("message") // message, join, leave, system
  createdAt DateTime @default(now())

  // Relations
  roomId String
  room   ChatRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)
  userId String
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("chat_messages")
}

model Report {
  id          String   @id @default(uuid())
  type        String   // technical, inappropriate, spam, other
  description String?
  status      String   @default("pending") // pending, reviewed, resolved
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  reporterId String
  reporter   User   @relation(fields: [reporterId], references: [id], onDelete: Cascade)

  @@map("reports")
}
