// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model with enhanced profile and admin features
model User {
  id        String   @id @default(uuid())
  nickname  String   @unique
  email     String   @unique
  password  String?  // Optional for guest users
  isGuest   Boolean  @default(false)
  avatar    String?
  bio       String?
  age       Int?
  address   String?
  phone     String?
  role      UserRole @default(USER)
  status    UserStatus @default(ACTIVE)
  isMuted   Boolean  @default(false)
  muteUntil DateTime?
  isBlocked Boolean  @default(false)
  lastLogin DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Enhanced profile fields
  fullName    String?
  bio         String?
  age         Int?
  dateOfBirth DateTime?
  address     String?
  phone       String?
  website     String?
  location    String?
  gender      String?
  occupation  String?
  interests   String[]
  socialLinks Json?     // {twitter: "url", instagram: "url", etc.}
  profileVisibility String @default("public") // public, friends, private
  profileCompleteness Int @default(0) // 0-100 percentage

  // Admin and moderation fields
  role        Role     @default(USER)
  permissions Permission[]
  isActive    Boolean  @default(true)
  isBlocked   Boolean  @default(false)
  isSuspended Boolean  @default(false)
  suspendedUntil DateTime?
  suspendReason  String?
  lastLoginAt    DateTime?
  lastActiveAt   DateTime?

  // Relations
  posts         Post[]
  comments      Comment[]
  likes         Like[]
  chatRooms     ChatRoom[]
  chatMessages  ChatMessage[]
  roomMembers   RoomMember[]
  reports       Report[]
<<<<<<< HEAD
  adminActions  AdminAction[]
  femaleProfile FemaleProfile?
  follows       Follow[] @relation("Follower")
  followers     Follow[] @relation("Following")
  fanCommunityMembers FanCommunityMember[]
  emojiReactions EmojiReaction[]
  voiceMessages VoiceMessage[]
  stories       Story[]
  storyViews    StoryView[]
=======
  
  // Admin-related relations
  adminActions       AdminAction[]
  moderationActions  ModerationAction[]
  receivedModerations ModerationAction[] @relation("UserModerated")
  userPermissions    UserPermission[]
  activities         UserActivity[]     @relation("UserActivities")
>>>>>>> 79949e6e27ce139f4c3c834292cbe48e4ece80c4

  @@map("users")
}

<<<<<<< HEAD
model Story {
  id          String    @id @default(uuid())
  content     String?   // Text content for text stories
  mediaUrl    String?   // Image or video URL
  mediaType   MediaType? // IMAGE, VIDEO, TEXT
  duration    Int       @default(5) // Duration in seconds (default 5s for images, actual duration for videos)
  backgroundColor String? // Background color for text stories
  textColor   String?   // Text color
  fontSize    String?   // Font size (small, medium, large)
  fontStyle   String?   // Font style (normal, bold, italic)
  stickers    Json?     // Array of sticker objects with position and type
  isActive    Boolean   @default(true)
  expiresAt   DateTime  // 24 hours from creation
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  views StoryView[]

  @@map("stories")
}

model StoryView {
  id        String   @id @default(uuid())
  viewedAt  DateTime @default(now())

  // Relations
  storyId String
  story   Story  @relation(fields: [storyId], references: [id], onDelete: Cascade)
  viewerId String
  viewer   User   @relation(fields: [viewerId], references: [id], onDelete: Cascade)

  @@unique([storyId, viewerId])
  @@map("story_views")
}

=======
// Role enum
enum Role {
  USER
  MODERATOR
  ADMIN
  SUPER_ADMIN
}

// Permission model
model Permission {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  category    String   // user_management, content_management, system_management
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  users           User[]
  userPermissions UserPermission[]

  @@map("permissions")
}

// User-Permission junction table for fine-grained permissions
model UserPermission {
  id        String   @id @default(uuid())
  userId    String
  permissionId String
  grantedAt DateTime @default(now())
  grantedBy String?
  expiresAt DateTime?

  // Relations
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([userId, permissionId])
  @@map("user_permissions")
}

// Enhanced Post model with moderation
>>>>>>> 79949e6e27ce139f4c3c834292cbe48e4ece80c4
model Post {
  id          String     @id @default(uuid())
  title       String
  content     String
  category    String
  excerpt     String?
  isPublished Boolean    @default(true)
  status      PostStatus @default(PUBLISHED)
  viewCount   Int        @default(0)
  isBlurred   Boolean    @default(false)
  mood        String?    // excited, happy, peaceful, grateful, determined
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Moderation fields
  status           ContentStatus @default(APPROVED)
  moderationReason String?
  moderatedAt      DateTime?
  moderatedBy      String?
  isBlocked        Boolean       @default(false)
  isFeatured       Boolean       @default(false)
  priority         Int           @default(0)

  // Relations
  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  comments Comment[]
  likes    Like[]
  mediaAttachments MediaAttachment[]
  emojiReactions EmojiReaction[]

  @@map("posts")
}

<<<<<<< HEAD
model MediaAttachment {
  id        String      @id @default(uuid())
  filename  String
  originalName String
  mimeType  String
  size      Int
  url       String
  type      MediaType   // IMAGE, VIDEO, AUDIO
  duration  Int?        // For video/audio files in seconds
  thumbnail String?     // Thumbnail URL for videos
  caption   String?
  createdAt DateTime    @default(now())

  // Relations
  postId String?
  post   Post?   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("media_attachments")
}

model VoiceMessage {
=======
// Enhanced Comment model with moderation
model Comment {
>>>>>>> 79949e6e27ce139f4c3c834292cbe48e4ece80c4
  id        String   @id @default(uuid())
  filename  String
  url       String
  duration  Int      // Duration in seconds
  waveform  String?  // JSON array of waveform data
  transcript String? // Auto-generated transcript
  createdAt DateTime @default(now())

  // Relations
  senderId String
  sender   User   @relation(fields: [senderId], references: [id], onDelete: Cascade)
  
  roomId String?
  room   ChatRoom? @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@map("voice_messages")
}

model EmojiReaction {
  id        String   @id @default(uuid())
  emoji     String   // The actual emoji character
  createdAt DateTime @default(now())

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  postId String?
  post   Post?   @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  commentId String?
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, postId, emoji])
  @@unique([userId, commentId, emoji])
  @@map("emoji_reactions")
}

model Comment {
  id        String        @id @default(uuid())
  content   String
  status    CommentStatus @default(APPROVED)
  isBlurred Boolean       @default(false)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  // Moderation fields
  status           ContentStatus @default(APPROVED)
  moderationReason String?
  moderatedAt      DateTime?
  moderatedBy      String?
  isBlocked        Boolean       @default(false)

  // Relations
  postId   String
  post     Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  emojiReactions EmojiReaction[]

  @@map("comments")
}

// Enhanced ChatMessage model with moderation
model ChatMessage {
  id        String   @id @default(uuid())
  content   String
  type      String   @default("message") // message, join, leave, system
  createdAt DateTime @default(now())

  // Moderation fields
  status           ContentStatus @default(APPROVED)
  moderationReason String?
  moderatedAt      DateTime?
  moderatedBy      String?
  isBlocked        Boolean       @default(false)

  // Relations
  roomId String
  room   ChatRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)
  userId String
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("chat_messages")
}

// Content status enum
enum ContentStatus {
  PENDING
  APPROVED
  REJECTED
  FLAGGED
  HIDDEN
}

// Admin action logging
model AdminAction {
  id          String   @id @default(uuid())
  adminId     String
  action      String   // create_user, delete_post, ban_user, etc.
  targetType  String   // user, post, comment, chat_message, etc.
  targetId    String?
  details     Json?
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())

  // Relations
  admin User @relation(fields: [adminId], references: [id], onDelete: Cascade)

  @@map("admin_actions")
}

// Moderation action tracking
model ModerationAction {
  id        String   @id @default(uuid())
  moderatorId String
  userId      String
  action      ModerationActionType
  reason      String?
  details     Json?
  expiresAt   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  moderator User @relation(fields: [moderatorId], references: [id], onDelete: Cascade)
  user      User @relation("UserModerated", fields: [userId], references: [id], onDelete: Cascade)

  @@map("moderation_actions")
}

// Moderation action types
enum ModerationActionType {
  WARN
  SUSPEND
  BAN
  BLOCK
  UNBAN
  UNSUSPEND
  UNBLOCK
  MUTE
  UNMUTE
}

// Enhanced Report model
model Report {
  id          String   @id @default(uuid())
  type        String   // technical, inappropriate, spam, other
  description String?
  status      String   @default("pending") // pending, reviewed, resolved, dismissed
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Enhanced fields
  targetType  String?  // user, post, comment, chat_message
  targetId    String?
  priority    ReportPriority @default(MEDIUM)
  assignedTo  String?
  resolvedBy  String?
  resolvedAt  DateTime?
  resolution  String?

  // Relations
  reporterId String
  reporter   User   @relation(fields: [reporterId], references: [id], onDelete: Cascade)

  @@map("reports")
}

// Report priority enum
enum ReportPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

// System settings for admin configuration
model SystemSetting {
  id          String   @id @default(uuid())
  key         String   @unique
  value       String
  description String?
  category    String   // general, security, moderation, etc.
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("system_settings")
}

// User activity tracking
model UserActivity {
  id        String   @id @default(uuid())
  userId    String
  action    String   // login, logout, post_created, comment_added, etc.
  details   Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  // Relations
  user User @relation("UserActivities", fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_activities")
}

// Like model (unchanged)
model Like {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  // Relations
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@map("likes")
}

// ChatRoom model (unchanged)
model ChatRoom {
  id          String     @id @default(uuid())
  name        String
  description String?
  atmosphere  String     @default("romantic") // romantic, intimate, friendly
  isPrivate   Boolean    @default(false)
  maxMembers  Int        @default(50)
  status      RoomStatus @default(ACTIVE)
  requiredRole UserRole  @default(USER)
  isForced    Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  creatorId String
  creator   User   @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  messages ChatMessage[]
  members  RoomMember[]
  bannedUsers RoomBan[]
  voiceMessages VoiceMessage[]

  @@map("chat_rooms")
}

// RoomMember model (unchanged)
model RoomMember {
  id       String   @id @default(uuid())
  joinedAt DateTime @default(now())
  isOnline Boolean  @default(true)
  lastSeen DateTime @default(now())

  // Relations
  roomId String
  room   ChatRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)
  userId String
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([roomId, userId])
  @@map("room_members")
}
<<<<<<< HEAD

model RoomBan {
  id        String   @id @default(uuid())
  reason    String?
  bannedAt  DateTime @default(now())
  bannedBy  String
  expiresAt DateTime?

  // Relations
  roomId String
  room   ChatRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)
  userId String
  user   User     @relation(fields: [userId], references: [id])

  @@unique([roomId, userId])
  @@map("room_bans")
}

model ChatMessage {
  id        String        @id @default(uuid())
  content   String
  type      String        @default("message") // message, join, leave, system
  status    MessageStatus @default(SENT)
  isDeleted Boolean       @default(false)
  deletedBy String?
  deletedAt DateTime?
  createdAt DateTime      @default(now())

  // Relations
  roomId String
  room   ChatRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)
  userId String
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("chat_messages")
}

model Report {
  id          String       @id @default(uuid())
  type        String       // technical, inappropriate, spam, other
  description String?
  status      ReportStatus @default(PENDING)
  targetType  String?      // user, post, comment, message
  targetId    String?
  reviewedBy  String?
  reviewedAt  DateTime?
  resolution  String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations
  reporterId String
  reporter   User   @relation(fields: [reporterId], references: [id], onDelete: Cascade)

  @@map("reports")
}

model AdminAction {
  id          String     @id @default(uuid())
  action      String     // ban, unban, delete_post, approve_post, etc.
  targetType  String     // user, post, comment, chat_message
  targetId    String
  reason      String?
  metadata    Json?      // Additional action data
  createdAt   DateTime   @default(now())

  // Relations
  adminId String
  admin   User   @relation(fields: [adminId], references: [id], onDelete: Cascade)

  @@map("admin_actions")
}

model SystemNotification {
  id        String   @id @default(uuid())
  title     String
  message   String
  type      String   @default("info") // info, warning, error, success
  isActive  Boolean  @default(true)
  targetRole UserRole? // If null, visible to all
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("system_notifications")
}

model AutoModerationRule {
  id          String   @id @default(uuid())
  name        String
  pattern     String   // Regex pattern or keyword
  action      String   // block, flag, delete
  targetType  String   // post, comment, message
  isActive    Boolean  @default(true)
  severity    Int      @default(1) // 1-5 severity level
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("auto_moderation_rules")
}

model FemaleProfile {
  id          String   @id @default(uuid())
  stageName   String   @unique
  realName    String?
  description String?
  avatar      String?
  coverImage  String?
  age         Int?
  height      String?
  measurements String?
  specialties String[]
  isDebuted   Boolean  @default(false)
  debutDate   DateTime?
  ranking     Int?
  isActive    Boolean  @default(true)
  totalEarnings Decimal? @default(0)
  monthlyEarnings Decimal? @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  fanCommunity FanCommunity?

  @@map("female_profiles")
}

model FanCommunity {
  id          String   @id @default(uuid())
  name        String
  description String?
  isPrivate   Boolean  @default(false)
  memberCount Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  femaleProfileId String @unique
  femaleProfile   FemaleProfile @relation(fields: [femaleProfileId], references: [id], onDelete: Cascade)

  members FanCommunityMember[]

  @@map("fan_communities")
}

model FanCommunityMember {
  id       String   @id @default(uuid())
  joinedAt DateTime @default(now())
  role     String   @default("member") // member, moderator

  // Relations
  communityId String
  community   FanCommunity @relation(fields: [communityId], references: [id], onDelete: Cascade)
  userId      String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([communityId, userId])
  @@map("fan_community_members")
}

model Follow {
  id         String   @id @default(uuid())
  followedAt DateTime @default(now())

  // Relations
  followerId  String
  follower    User   @relation("Follower", fields: [followerId], references: [id], onDelete: Cascade)
  followingId String
  following   User   @relation("Following", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("follows")
}

model SystemStats {
  id        String   @id @default(uuid())
  date      DateTime @unique @default(now())
  userCount Int      @default(0)
  postCount Int      @default(0)
  messageCount Int   @default(0)
  activeUsers Int    @default(0)
  revenue   Decimal? @default(0)
  createdAt DateTime @default(now())

  @@map("system_stats")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  MODERATOR
  USER
  GUEST
}

enum UserStatus {
  ACTIVE
  SUSPENDED
  BANNED
  PENDING
}

enum PostStatus {
  PUBLISHED
  DRAFT
  BLOCKED
  PENDING_REVIEW
  FLAGGED
}

enum CommentStatus {
  APPROVED
  PENDING
  BLOCKED
  FLAGGED
}

enum MessageStatus {
  SENT
  BLOCKED
  DELETED
  FLAGGED
}

enum RoomStatus {
  ACTIVE
  SUSPENDED
  CLOSED
}

enum ReportStatus {
  PENDING
  REVIEWED
  RESOLVED
  DISMISSED
}

enum MediaType {
  IMAGE
  VIDEO
  AUDIO
  TEXT
}
=======
>>>>>>> 79949e6e27ce139f4c3c834292cbe48e4ece80c4
